<?php

declare(strict_types=1);

namespace UIAwesome\Html\Helper;

use InvalidArgumentException;
use UnexpectedValueException;

use function mb_strtolower;
use function preg_match;
use function preg_replace;
use function str_ends_with;
use function str_replace;
use function strlen;
use function strrchr;
use function strrpos;
use function strtolower;
use function substr;
use function uniqid;

/**
 * This class provides set of static methods for common tasks.
 */
final class Utils
{
    /**
     * Convert PCRE regular expression to use in the "pattern" HTML property:
     *  - convert \x{FFFF} to \uFFFF;
     *  - remove flags and delimiters.
     *
     * For example:
     *
     * ```php
     * Utils::normalizeRegexp('/([a-z0-9-]+)/im'); // will return: ([a-z0-9-]+)
     * ```
     *
     * @link https://html.spec.whatwg.org/multipage/input.html#the-pattern-property
     *
     * @param string $regexp PCRE regular expression.
     * @param string|null $delimiter Regular expression delimiter.
     *
     * @throws InvalidArgumentException If incorrect regular expression or delimiter
     */
    public static function convertToPattern(string $regexp, string $delimiter = null): string
    {
        if (strlen($regexp) < 2) {
            throw new InvalidArgumentException('The length of the regular expression cannot be less than 2.');
        }

        $pattern = preg_replace('/\\\\x{?([0-9a-fA-F]+)}?/', '\u$1', $regexp);

        if ($delimiter === null) {
            $delimiter = $pattern[0];
        }

        if (strlen($delimiter) !== 1) {
            throw new InvalidArgumentException('Incorrect delimiter.');
        }

        $endPosition = strrpos($pattern, $delimiter, 1);

        if ($endPosition === false) {
            throw new InvalidArgumentException('Incorrect regular expression.');
        }

        return substr($pattern, 1, $endPosition - 1);
    }

    /**
     * Generate arrayable name from string.
     *
     * @param string $name String to convert.
     */
    public static function generateArrayableName(string $name): string
    {
        return !str_ends_with($name, '[]') ? $name . '[]' : $name;
    }

    /**
     * Generates a unique ID for an element.
     *
     * @param string $prefix The prefix string. If not specified, the default is 'id-'.
     *
     * @return string The unique ID.
     */
    public static function generateId(string $prefix = 'id-'): string
    {
        return uniqid($prefix);
    }

    /**
     * Generates an appropriate input ID for the specified property name or expression.
     *
     * This method converts the result {@see generateInputName()} into a valid input ID.
     *
     * For example, if {@see generateInputName()} returns `Post[content]`, this method will return `post-content`.
     *
     * @param string $formModel The form model name.
     * @param string $property The property name or expression.
     * @param string $charset default `UTF-8`.
     *
     * @throws InvalidArgumentException If the property name contains non-word characters.
     * @throws UnexpectedValueException If charset is unknown
     *
     * @return string the generated input ID.
     */
    public static function generateInputId(
        string $formModel = '',
        string $property = '',
        string $charset = 'UTF-8'
    ): string {
        $name = mb_strtolower(self::generateInputName($formModel, $property), $charset);

        return str_replace(['[]', '][', '[', ']', ' ', '.'], ['', '-', '-', '', '-', '-'], $name);
    }

    /**
     * Generates an appropriate input name for the specified property name or expression.
     *
     * This method generates a name that can be used as the input name to collect user input for the specified
     * property. The name is generated according to the of the form and the given property name. For example, if the
     * form name of the `Post` form is `Post`, then the input name generated for the `content` property would be
     * `Post[content]`.
     *
     * If the property is an array, or a model property that is an array, the arrayable input name can be generated by
     * setting the `$arrayable` parameter to `true`. For example, if the form name of the `Post` form is `Post`, then
     * the input name generated for the `tags[]` property would be `Post[tags][]`.
     *
     * @param string $formModel The form model name.
     * @param string $property The property name or expression.
     * @param bool $arrayable Whether to generate an arrayable input name. This is mainly used in tabular data input.
     *
     * @throws InvalidArgumentException If the property name contains non-word characters or empty form name for
     * tabular inputs
     */
    public static function generateInputName(string $formModel, string $property, bool $arrayable = false): string
    {
        if ($arrayable === true) {
            $property = self::generateArrayableName($property);
        }

        $data = self::parseProperty($property);

        if ($formModel === '' && $data['prefix'] === '') {
            return $property;
        }

        if ($formModel !== '') {
            return $formModel . $data['prefix'] . '[' . $data['name'] . ']' . $data['suffix'];
        }

        throw new InvalidArgumentException('The form model name cannot be empty for tabular inputs.');
    }

    /**
     * Returns the short name of the given class.
     *
     * @param string $class The class name.
     * @param bool $suffix Whether to append the `::class` suffix to the class name. If `false`, the suffix will not be
     * appended.
     * @param bool $lowercase Whether to return the class name in lowercase. If `false`, the class name will be returned
     * in its original case.
     */
    public static function getShortNameClass(string $class, bool $suffix = true, bool $lowercase = false): string
    {
        if ($lowercase === true) {
            $class = strtolower($class);
        }

        $class = substr(strrchr($class, '\\'), 1);

        return $suffix === true ? "$class::class" : $class;
    }

    /**
     * This method parses an property expression and returns an associative array containing real property name,
     * prefix, and suffix.
     *
     * For example, `['name' => 'content', 'prefix' => '', 'suffix' => '[0]']`
     *
     * An property expression is an property name prefixed and/or suffixed with array indexes. It is mainly used in
     * tabular data input and/or input of an array type. Below are some examples:
     *
     * - `[0]content` is used in tabular data input to represent the "content" property for the first model in tabular
     *    input;
     * - `dates[0]` represents the first array element of the "dates" property;
     * - `[0]dates[0]` represents the first array element of the "dates" property for the first model in tabular
     *    input.
     *
     * @param string $property The property name or expression
     *
     * @throws InvalidArgumentException If the property name contains non-word characters.
     *
     * @psalm-return string[]
     */
    private static function parseProperty(string $property): array
    {
        if (!preg_match('/(^|.*\])([\w\.\+\-_]+)(\[.*|$)/u', $property, $matches)) {
            throw new InvalidArgumentException('Property name must contain word characters only.');
        }

        return [
            'name' => $matches[2],
            'prefix' => $matches[1],
            'suffix' => $matches[3],
        ];
    }
}
